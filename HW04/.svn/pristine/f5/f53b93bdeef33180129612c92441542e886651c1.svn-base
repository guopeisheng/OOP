<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en">
<head>
<!-- Generated by javadoc (1.8.0_144) on Tue Sep 19 22:34:58 CDT 2017 -->
<title>BallModel</title>
<meta name="date" content="2017-09-19">
<link rel="stylesheet" type="text/css" href="../stylesheet.css" title="Style">
<script type="text/javascript" src="../script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="BallModel";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":10,"i11":10};
var tabs = {65535:["t0","All Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/BallModel.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev&nbsp;Class</li>
<li><a href="../model/ColorBall.html" title="class in model"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?model/BallModel.html" target="_top">Frames</a></li>
<li><a href="BallModel.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">model</div>
<h2 title="Class BallModel" class="title">Class BallModel</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li>model.BallModel</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<hr>
<br>
<pre>public class <span class="typeNameLabel">BallModel</span>
extends java.lang.Object</pre>
<div class="block">ballmodel</div>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Constructor Summary table, listing constructors, and an explanation">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="../model/BallModel.html#BallModel-model.IModel2ViewAdapter-">BallModel</a></span>(<a href="../model/IModel2ViewAdapter.html" title="interface in model">IModel2ViewAdapter</a>&nbsp;model2ViewAdpt)</code>
<div class="block">constructor</div>
</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" border="0" cellpadding="3" cellspacing="0" summary="Method Summary table, listing methods, and an explanation">
<caption><span id="t0" class="activeTableTab"><span>All Methods</span><span class="tabEnd">&nbsp;</span></span><span id="t2" class="tableTab"><span><a href="javascript:show(2);">Instance Methods</a></span><span class="tabEnd">&nbsp;</span></span><span id="t4" class="tableTab"><span><a href="javascript:show(8);">Concrete Methods</a></span><span class="tabEnd">&nbsp;</span></span></caption>
<tr>
<th class="colFirst" scope="col">Modifier and Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#actionPerformed-java.awt.event.ActionEvent-">actionPerformed</a></span>(java.awt.event.ActionEvent&nbsp;e)</code>
<div class="block">The timer "ticks" by calling this method every _timeslice milliseconds</div>
</td>
</tr>
<tr id="i1" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#changeSwitcher-model.IUpdateStrategy-">changeSwitcher</a></span>(<a href="../model/IUpdateStrategy.html" title="interface in model">IUpdateStrategy</a>&nbsp;strategy)</code>&nbsp;</td>
</tr>
<tr id="i2" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#clearBalls--">clearBalls</a></span>()</code>
<div class="block">clear</div>
</td>
</tr>
<tr id="i3" class="rowColor">
<td class="colFirst"><code><a href="../model/IStrategyFac.html" title="interface in model">IStrategyFac</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#combineStrategyFacs-model.IStrategyFac-model.IStrategyFac-">combineStrategyFacs</a></span>(<a href="../model/IStrategyFac.html" title="interface in model">IStrategyFac</a>&nbsp;stratFac1,
                   <a href="../model/IStrategyFac.html" title="interface in model">IStrategyFac</a>&nbsp;stratFac2)</code>
<div class="block">Returns an IStrategyFac that can instantiate a MultiStrategy with the two
 strategies made by the two given IStrategyFac objects.</div>
</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#fixName-java.lang.String-">fixName</a></span>(java.lang.String&nbsp;classname)</code>&nbsp;</td>
</tr>
<tr id="i5" class="rowColor">
<td class="colFirst"><code><a href="../model/ColorBall.html" title="class in model">ColorBall</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#loadBall-java.lang.String-java.awt.Container-model.IUpdateStrategy-">loadBall</a></span>(java.lang.String&nbsp;className,
        java.awt.Container&nbsp;panel,
        <a href="../model/IUpdateStrategy.html" title="interface in model">IUpdateStrategy</a>&nbsp;strategy)</code>
<div class="block">The following method returns an instance of an ABall, given a fully qualified class name (package.classname) of
 a subclass of ABall.</div>
</td>
</tr>
<tr id="i6" class="altColor">
<td class="colFirst"><code><a href="../model/IUpdateStrategy.html" title="interface in model">IUpdateStrategy</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#loadStrategy-java.lang.String-">loadStrategy</a></span>(java.lang.String&nbsp;className)</code>&nbsp;</td>
</tr>
<tr id="i7" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#makeBall-java.lang.String-java.awt.Container-model.IUpdateStrategy-">makeBall</a></span>(java.lang.String&nbsp;classname,
        java.awt.Container&nbsp;panel,
        <a href="../model/IUpdateStrategy.html" title="interface in model">IUpdateStrategy</a>&nbsp;strategy)</code>
<div class="block">make ball</div>
</td>
</tr>
<tr id="i8" class="altColor">
<td class="colFirst"><code><a href="../model/IStrategyFac.html" title="interface in model">IStrategyFac</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#makeStrategyFac-java.lang.String-">makeStrategyFac</a></span>(java.lang.String&nbsp;classname)</code>
<div class="block">Returns an IStrategyFac that can instantiate the strategy specified by
 classname.</div>
</td>
</tr>
<tr id="i9" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#paint-java.awt.Graphics-">paint</a></span>(java.awt.Graphics&nbsp;g)</code>
<div class="block">this method is called by view2model adapter</div>
</td>
</tr>
<tr id="i10" class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#start--">start</a></span>()</code>
<div class="block">start</div>
</td>
</tr>
<tr id="i11" class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="../model/BallModel.html#switchPaint-java.awt.Container-">switchPaint</a></span>(java.awt.Container&nbsp;panel)</code>&nbsp;</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods.inherited.from.class.java.lang.Object">
<!--   -->
</a>
<h3>Methods inherited from class&nbsp;java.lang.Object</h3>
<code>equals, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="BallModel-model.IModel2ViewAdapter-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>BallModel</h4>
<pre>public&nbsp;BallModel(<a href="../model/IModel2ViewAdapter.html" title="interface in model">IModel2ViewAdapter</a>&nbsp;model2ViewAdpt)</pre>
<div class="block">constructor</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>model2ViewAdpt</code> - adapter</dd>
</dl>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="actionPerformed-java.awt.event.ActionEvent-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>actionPerformed</h4>
<pre>public&nbsp;void&nbsp;actionPerformed(java.awt.event.ActionEvent&nbsp;e)</pre>
<div class="block">The timer "ticks" by calling this method every _timeslice milliseconds</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>e</code> - action</dd>
</dl>
</li>
</ul>
<a name="makeBall-java.lang.String-java.awt.Container-model.IUpdateStrategy-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>makeBall</h4>
<pre>public&nbsp;void&nbsp;makeBall(java.lang.String&nbsp;classname,
                     java.awt.Container&nbsp;panel,
                     <a href="../model/IUpdateStrategy.html" title="interface in model">IUpdateStrategy</a>&nbsp;strategy)</pre>
<div class="block">make ball</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>classname</code> - </dd>
<dd><code>panel</code> - </dd>
<dd><code>strategy</code> - </dd>
</dl>
</li>
</ul>
<a name="start--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>start</h4>
<pre>public&nbsp;void&nbsp;start()</pre>
<div class="block">start</div>
</li>
</ul>
<a name="paint-java.awt.Graphics-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>paint</h4>
<pre>public&nbsp;void&nbsp;paint(java.awt.Graphics&nbsp;g)</pre>
<div class="block">this method is called by view2model adapter</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>g</code> - place to draw</dd>
</dl>
</li>
</ul>
<a name="clearBalls--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>clearBalls</h4>
<pre>public&nbsp;void&nbsp;clearBalls()</pre>
<div class="block">clear</div>
</li>
</ul>
<a name="changeSwitcher-model.IUpdateStrategy-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>changeSwitcher</h4>
<pre>public&nbsp;void&nbsp;changeSwitcher(<a href="../model/IUpdateStrategy.html" title="interface in model">IUpdateStrategy</a>&nbsp;strategy)</pre>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>strategy</code> - specify strategy</dd>
</dl>
</li>
</ul>
<a name="switchPaint-java.awt.Container-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>switchPaint</h4>
<pre>public&nbsp;void&nbsp;switchPaint(java.awt.Container&nbsp;panel)</pre>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>panel</code> - switch</dd>
</dl>
</li>
</ul>
<a name="loadBall-java.lang.String-java.awt.Container-model.IUpdateStrategy-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>loadBall</h4>
<pre>public&nbsp;<a href="../model/ColorBall.html" title="class in model">ColorBall</a>&nbsp;loadBall(java.lang.String&nbsp;className,
                          java.awt.Container&nbsp;panel,
                          <a href="../model/IUpdateStrategy.html" title="interface in model">IUpdateStrategy</a>&nbsp;strategy)</pre>
<div class="block">The following method returns an instance of an ABall, given a fully qualified class name (package.classname) of
 a subclass of ABall.
 The method assumes that there is only one constructor for the supplied class that has the same *number* of
 input parameters as specified in the args array and that it conforms to a specific
 signature, i.e. specific order and types of input parameters in the args array.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>className</code> - A string that is the fully qualified class name of the desired object</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>An instance of the supplied class.</dd>
</dl>
</li>
</ul>
<a name="makeStrategyFac-java.lang.String-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>makeStrategyFac</h4>
<pre>public&nbsp;<a href="../model/IStrategyFac.html" title="interface in model">IStrategyFac</a>&nbsp;makeStrategyFac(java.lang.String&nbsp;classname)</pre>
<div class="block">Returns an IStrategyFac that can instantiate the strategy specified by
 classname. Returns a factory for a beeping error strategy if classname is null.
 The toString() of the returned factory is the classname.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>classname</code> - Shortened name of desired strategy</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A factory to make that strategy</dd>
</dl>
</li>
</ul>
<a name="fixName-java.lang.String-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>fixName</h4>
<pre>public&nbsp;java.lang.String&nbsp;fixName(java.lang.String&nbsp;classname)</pre>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>classname</code> - </dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>strategy name</dd>
</dl>
</li>
</ul>
<a name="loadStrategy-java.lang.String-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>loadStrategy</h4>
<pre>public&nbsp;<a href="../model/IUpdateStrategy.html" title="interface in model">IUpdateStrategy</a>&nbsp;loadStrategy(java.lang.String&nbsp;className)</pre>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>className</code> - </dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>strategy</dd>
</dl>
</li>
</ul>
<a name="combineStrategyFacs-model.IStrategyFac-model.IStrategyFac-">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>combineStrategyFacs</h4>
<pre>public&nbsp;<a href="../model/IStrategyFac.html" title="interface in model">IStrategyFac</a>&nbsp;combineStrategyFacs(<a href="../model/IStrategyFac.html" title="interface in model">IStrategyFac</a>&nbsp;stratFac1,
                                        <a href="../model/IStrategyFac.html" title="interface in model">IStrategyFac</a>&nbsp;stratFac2)</pre>
<div class="block">Returns an IStrategyFac that can instantiate a MultiStrategy with the two
 strategies made by the two given IStrategyFac objects. Returns null if
 either supplied factory is null. The toString() of the returned factory
 is the toString()'s of the two given factories, concatenated with "-".
 If either factory is null, then a factory for a beeping error strategy is returned.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>stratFac1</code> - An IStrategyFac for a strategy</dd>
<dd><code>stratFac2</code> - An IStrategyFac for a strategy</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>An IStrategyFac for the composition of the two strategies</dd>
</dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../overview-summary.html">Overview</a></li>
<li><a href="package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="class-use/BallModel.html">Use</a></li>
<li><a href="package-tree.html">Tree</a></li>
<li><a href="../deprecated-list.html">Deprecated</a></li>
<li><a href="../index-files/index-1.html">Index</a></li>
<li><a href="../help-doc.html">Help</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>Prev&nbsp;Class</li>
<li><a href="../model/ColorBall.html" title="class in model"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="../index.html?model/BallModel.html" target="_top">Frames</a></li>
<li><a href="BallModel.html" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li>Field&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
